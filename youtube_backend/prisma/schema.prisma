generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  username           String         @unique
  phone_number       String?        @unique
  password           String
  firstName          String
  lastName           String
  avatar             String?
  role               Role           @default(USER)
  is_email_verified  Boolean        @default(false)
  is_phone_verified  Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  channelName        String?        @default("")
  channelDescription String?        @default("")
  channelBanner      String?        @default("")
  totalViews         BigInt         @default(0)
  watchHistory       WatchHistory[]
  notifications      Notification[]
  OAuthAccount       OAuthAccount[]
  videos             Video[]
  comments           Comment[]
  likes              Like[]
  subscriptions      Subscription[] @relation("UserSubscriptions")
  subscribers        Subscription[] @relation("UserSubscribers")
  playlists          Playlist[]
  isBlocked          Boolean        @default(false)
  blockedUntil       DateTime?
  loginAttempts      Int            @default(0)
  subscribersCount   Int            @default(0)

  @@map("user")
}

model OAuthAccount {
  id           String        @id @default(uuid())
  userId       String
  provider     OAuthProvider
  providerId   String // Google ID
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  tokenType    String?
  scope        String?
  idToken      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@map("oauthaccount")
}

model Video {
  id          String  @id @default(uuid())
  title       String
  description String?

  thumbnail      String?
  videoUrl       String
  duration       Int
  playlistVideos PlaylistVideo[]
  watchHistory   WatchHistory[]
  status         VideoStatus     @default(PROCESSING)
  visibility     Visibility      @default(PUBLIC)
  viewsCount     Int             @default(0)
  likesCount     Int             @default(0)
  dislikesCount  Int             @default(0)
  createdAt      DateTime        @default(now())
  commentsCount  Int             @default(0)
  authorId       String
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments       Comment[]
  likes          Like[]
  fileSize       Int
  folderName     String
  tags           String[]

  publishedAt DateTime?

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("video")
}

model Category {
  id     String  @id @default(uuid())
  title  String
  videos Video[]

  @@map("category")
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  likesCount    Int      @default(0)
  dislikesCount Int      @default(0)
  isPinned      Boolean  @default(false)
  repliesCount  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  videoId       String
  video         Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  likes         Like[]

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comment")
}

model Subscription {
  id                   String   @id @default(cuid())
  subscriberId         String
  subscriber           User     @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  channelId            String
  channel              User     @relation("UserSubscribers", fields: [channelId], references: [id], onDelete: Cascade)
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())

  @@unique([subscriberId, channelId])
  @@map("subscription")
}

model Playlist {
  id          String     @id @default(uuid())
  title       String
  description String?
  visibility  Visibility @default(PUBLIC)
  createdAt   DateTime   @default(now())

  authorId String
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  videos   PlaylistVideo[]

  @@map("playlist")
}

model PlaylistVideo {
  id       String   @id @default(cuid())
  position Int
  addedAt  DateTime @default(now())

  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
  @@map("playlistvideo")
}

model Like {
  id        String   @id @default(uuid())
  type      LikeType
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String?
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId, type])
  @@unique([userId, commentId, type])
  @@map("like")
}

enum LikeType {
  LIKE
  DISLIKE
}

model WatchHistory {
  id        String   @id @default(cuid())
  watchedAt DateTime @default(now())
  watchTime Int

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("watchhistory")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

enum NotificationType {
  NEW_VIDEO
  NEW_SUBSCRIBER
  VIDEO_LIKED
  COMMENT_REPLY
  MENTION
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum OAuthProvider {
  Google
  FACEBOOK
  GITHUB
  APPLE
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  PUBLISHED
  PRIVATE
  UNLISTED
  DELETED
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}
